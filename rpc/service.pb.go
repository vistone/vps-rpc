// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: rpc/service.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TLS客户端类型
type TLSClientType int32

const (
	TLSClientType_DEFAULT TLSClientType = 0
	TLSClientType_CHROME  TLSClientType = 1
	TLSClientType_FIREFOX TLSClientType = 2
	TLSClientType_SAFARI  TLSClientType = 3
	TLSClientType_IOS     TLSClientType = 4
	TLSClientType_ANDROID TLSClientType = 5
	TLSClientType_EDGE    TLSClientType = 6
)

// Enum value maps for TLSClientType.
var (
	TLSClientType_name = map[int32]string{
		0: "DEFAULT",
		1: "CHROME",
		2: "FIREFOX",
		3: "SAFARI",
		4: "IOS",
		5: "ANDROID",
		6: "EDGE",
	}
	TLSClientType_value = map[string]int32{
		"DEFAULT": 0,
		"CHROME":  1,
		"FIREFOX": 2,
		"SAFARI":  3,
		"IOS":     4,
		"ANDROID": 5,
		"EDGE":    6,
	}
)

func (x TLSClientType) Enum() *TLSClientType {
	p := new(TLSClientType)
	*p = x
	return p
}

func (x TLSClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLSClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_rpc_service_proto_enumTypes[0].Descriptor()
}

func (TLSClientType) Type() protoreflect.EnumType {
	return &file_rpc_service_proto_enumTypes[0]
}

func (x TLSClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLSClientType.Descriptor instead.
func (TLSClientType) EnumDescriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{0}
}

// 抓取请求
type FetchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	UserAgent     string                 `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	TlsClient     TLSClientType          `protobuf:"varint,4,opt,name=tls_client,json=tlsClient,proto3,enum=rpc.TLSClientType" json:"tls_client,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchRequest) Reset() {
	*x = FetchRequest{}
	mi := &file_rpc_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchRequest) ProtoMessage() {}

func (x *FetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchRequest.ProtoReflect.Descriptor instead.
func (*FetchRequest) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{0}
}

func (x *FetchRequest) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FetchRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *FetchRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *FetchRequest) GetTlsClient() TLSClientType {
	if x != nil {
		return x.TlsClient
	}
	return TLSClientType_DEFAULT
}

// 批量抓取请求
type BatchFetchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Requests      []*FetchRequest        `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
	MaxConcurrent int32                  `protobuf:"varint,2,opt,name=max_concurrent,json=maxConcurrent,proto3" json:"max_concurrent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchFetchRequest) Reset() {
	*x = BatchFetchRequest{}
	mi := &file_rpc_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchFetchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchFetchRequest) ProtoMessage() {}

func (x *BatchFetchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchFetchRequest.ProtoReflect.Descriptor instead.
func (*BatchFetchRequest) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{1}
}

func (x *BatchFetchRequest) GetRequests() []*FetchRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

func (x *BatchFetchRequest) GetMaxConcurrent() int32 {
	if x != nil {
		return x.MaxConcurrent
	}
	return 0
}

// 响应
type FetchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	StatusCode    int32                  `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Body          []byte                 `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Error         string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FetchResponse) Reset() {
	*x = FetchResponse{}
	mi := &file_rpc_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchResponse) ProtoMessage() {}

func (x *FetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchResponse.ProtoReflect.Descriptor instead.
func (*FetchResponse) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{2}
}

func (x *FetchResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *FetchResponse) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *FetchResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *FetchResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *FetchResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// 批量响应
type BatchFetchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Responses     []*FetchResponse       `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchFetchResponse) Reset() {
	*x = BatchFetchResponse{}
	mi := &file_rpc_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchFetchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchFetchResponse) ProtoMessage() {}

func (x *BatchFetchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchFetchResponse.ProtoReflect.Descriptor instead.
func (*BatchFetchResponse) Descriptor() ([]byte, []int) {
	return file_rpc_service_proto_rawDescGZIP(), []int{3}
}

func (x *BatchFetchResponse) GetResponses() []*FetchResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

var File_rpc_service_proto protoreflect.FileDescriptor

const file_rpc_service_proto_rawDesc = "" +
	"\n" +
	"\x11rpc/service.proto\x12\x03rpc\"\xe8\x01\n" +
	"\fFetchRequest\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x128\n" +
	"\aheaders\x18\x02 \x03(\v2\x1e.rpc.FetchRequest.HeadersEntryR\aheaders\x12\x1d\n" +
	"\n" +
	"user_agent\x18\x03 \x01(\tR\tuserAgent\x121\n" +
	"\n" +
	"tls_client\x18\x04 \x01(\x0e2\x12.rpc.TLSClientTypeR\ttlsClient\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"i\n" +
	"\x11BatchFetchRequest\x12-\n" +
	"\brequests\x18\x01 \x03(\v2\x11.rpc.FetchRequestR\brequests\x12%\n" +
	"\x0emax_concurrent\x18\x02 \x01(\x05R\rmaxConcurrent\"\xe3\x01\n" +
	"\rFetchResponse\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x1f\n" +
	"\vstatus_code\x18\x02 \x01(\x05R\n" +
	"statusCode\x129\n" +
	"\aheaders\x18\x03 \x03(\v2\x1f.rpc.FetchResponse.HeadersEntryR\aheaders\x12\x12\n" +
	"\x04body\x18\x04 \x01(\fR\x04body\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"F\n" +
	"\x12BatchFetchResponse\x120\n" +
	"\tresponses\x18\x01 \x03(\v2\x12.rpc.FetchResponseR\tresponses*a\n" +
	"\rTLSClientType\x12\v\n" +
	"\aDEFAULT\x10\x00\x12\n" +
	"\n" +
	"\x06CHROME\x10\x01\x12\v\n" +
	"\aFIREFOX\x10\x02\x12\n" +
	"\n" +
	"\x06SAFARI\x10\x03\x12\a\n" +
	"\x03IOS\x10\x04\x12\v\n" +
	"\aANDROID\x10\x05\x12\b\n" +
	"\x04EDGE\x10\x062\x7f\n" +
	"\x0eCrawlerService\x12.\n" +
	"\x05Fetch\x12\x11.rpc.FetchRequest\x1a\x12.rpc.FetchResponse\x12=\n" +
	"\n" +
	"BatchFetch\x12\x16.rpc.BatchFetchRequest\x1a\x17.rpc.BatchFetchResponseB\aZ\x05./rpcb\x06proto3"

var (
	file_rpc_service_proto_rawDescOnce sync.Once
	file_rpc_service_proto_rawDescData []byte
)

func file_rpc_service_proto_rawDescGZIP() []byte {
	file_rpc_service_proto_rawDescOnce.Do(func() {
		file_rpc_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_rpc_service_proto_rawDesc), len(file_rpc_service_proto_rawDesc)))
	})
	return file_rpc_service_proto_rawDescData
}

var file_rpc_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_rpc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_rpc_service_proto_goTypes = []any{
	(TLSClientType)(0),         // 0: rpc.TLSClientType
	(*FetchRequest)(nil),       // 1: rpc.FetchRequest
	(*BatchFetchRequest)(nil),  // 2: rpc.BatchFetchRequest
	(*FetchResponse)(nil),      // 3: rpc.FetchResponse
	(*BatchFetchResponse)(nil), // 4: rpc.BatchFetchResponse
	nil,                        // 5: rpc.FetchRequest.HeadersEntry
	nil,                        // 6: rpc.FetchResponse.HeadersEntry
}
var file_rpc_service_proto_depIdxs = []int32{
	5, // 0: rpc.FetchRequest.headers:type_name -> rpc.FetchRequest.HeadersEntry
	0, // 1: rpc.FetchRequest.tls_client:type_name -> rpc.TLSClientType
	1, // 2: rpc.BatchFetchRequest.requests:type_name -> rpc.FetchRequest
	6, // 3: rpc.FetchResponse.headers:type_name -> rpc.FetchResponse.HeadersEntry
	3, // 4: rpc.BatchFetchResponse.responses:type_name -> rpc.FetchResponse
	1, // 5: rpc.CrawlerService.Fetch:input_type -> rpc.FetchRequest
	2, // 6: rpc.CrawlerService.BatchFetch:input_type -> rpc.BatchFetchRequest
	3, // 7: rpc.CrawlerService.Fetch:output_type -> rpc.FetchResponse
	4, // 8: rpc.CrawlerService.BatchFetch:output_type -> rpc.BatchFetchResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_rpc_service_proto_init() }
func file_rpc_service_proto_init() {
	if File_rpc_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_rpc_service_proto_rawDesc), len(file_rpc_service_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_service_proto_goTypes,
		DependencyIndexes: file_rpc_service_proto_depIdxs,
		EnumInfos:         file_rpc_service_proto_enumTypes,
		MessageInfos:      file_rpc_service_proto_msgTypes,
	}.Build()
	File_rpc_service_proto = out.File
	file_rpc_service_proto_goTypes = nil
	file_rpc_service_proto_depIdxs = nil
}
